<!DOCTYPE html>
<html lang="en">
<head>
	<meta charset="utf-8">
	<title>MimeCas Dashboard</title>

	<!-- <link rel="stylesheet" media="screen" href="style.css"> -->
  <link rel="stylesheet" type="text/css" href="ra-doc.css">
</head>

<body>

<div class="ra-doc yui-cssreset">

<h1>Welcome to the MimeCas RapidApp Demo!</h1>

<p>This is an example application providing a front-end for the "MimeCas" DBIC schema using the new "RapidApp" framework. The database has been loaded with some sample data (messages from various Perl-based mailing lists) in order to showcase some of the functionality of the framework.</p>

<p>Click the items on the left to explore the application and database, or, start here:</p>

<ul><li><b>
<a href="#!/main/db/schema_mailbox">Browse Mailboxes (Lists)</a>
</b>
</li></ul>


<h2>What is RapidApp?</h2>

<p>RapidApp is an open-source application framework that is currently under development for quickly building dynamic Web 2.0/AJAX interfaces for various data models. It is based on the following open-source technologies:</p>

<ul>
<li>Perl</li>
<li>Catalyst</li>
<li>ExtJS</li>
<li>DBIx::Class</li>
</ul>

<p>The primary data model that RapidApp focuses on is DBIx::Class with CRUD interfaces and that is what this demo primarily showcases. However, RapidApp is a general framework and supports all kinds of interfaces and models. At its core, RapidApp is just an extension to Catalyst with an ExtJS client container structure, so it can do anything that Catalyst and ExtJS can do.</p>

<h3>Understands the DBIC data model</h3>

<p>RapidApp aims to <i>really</i> understand the DBIC schema (sources, columns and relationships) and provide a high-level declarative environment to build custom interfaces on top of. It ties Source-based views with ExtJS Data Stores, which in turn supply various ExtJS component interfaces such as Grids, Trees and DataViews. These CRUD views tie into the backend Source model and provide a virtual table interface with special types of columns:</p>

<ul>
<li>Local Columns</li>
<li>Joined Columns</li>
<li>Single-Relationship Columns</li>
<li>Multi-Relationship Columns</li>
<li>M2M-Relationship Columns</li>
<li>Virtual Columns</li>
</ul>

<div style="padding-left:15px;padding-right:15px">

<h4>Local Columns</h4>

<p>These are just the normal columns in the Source</p>

<h4>Joined Columns</h4>

<p>These are columns of other sources that have been joined. Joined columns can be any depth following through DBIC relationships</p>

<h4>Single-Relationship Columns</h4>

<p>These are "belongs_to" relationships represented as columns. The value shown is a representation of the related row (its configured display column) and optionally an inline link to naviagte to the related row. When editing a Single-Relationship column an appropriate editor is supplied, such as a dropdown. </p>

<h4>Multi-Relationship Columns</h4>

<p>These are "has_many" relationships represented as columns. The value shown is a representation of the related <i>ResultSet</i> with a row count and an optional link to view the related rows.</p>

<h4>M2M-Relationship Columns</h4>

<p>These are "many_to_many" relationships represented as columns. The value shown is a representation of the related rows (currently this is limited to a comma-separated list). When editing a many to many selector is provided, such as a lust of checkboxes.

<h4>Virtual Columns</h4>

<p>These are arbitrary user-defined columns that can be configured as an SQL literal with 'self' psudoname translations so they work in table/query view with multiple rows. Optional update code can also be supplied to perform custom business logic for creating/changing a value.

</div>

<p>These columns can be custom configured on the back end via a delcarative syntax and details such as rendering, editing, validating, and so forth can all be controlled and customized. However, because RapidApp understands the schema, useful base defaults are automatically configured, such as column data data type, relationship info, and so on.</p>

<p>RapidApp also provides mechanisms for automatic configuration of interfaces such as grids and page-views making it possible to get an application running with just a DBIC Schema and few lines of code</p>

<p>There are lots of other features of RapidApp and possible interfaces that can be built. Again, RapidApp is a <i>framework</i> not a admin utility like PHP My Admin, although admin apps like that can certainly be made (quickly, and a lot better). This demo showcases some other features, such as saved views, automatic authentication db, navigation trees, and so on. Explore the app by clicking the items on the left. </p>

<h2>What is MimeCas?</h2>

<p>MimeCas is a simple DBIC schema/data-model for storing <a target="_blank" href="http://en.wikipedia.org/wiki/MIME">MIME</a> objects. MIME objects are E-Mail messages, images, content parts and other types of attachments. The word "Cas" is in the name because it uses a <a target="_blank" href="http://en.wikipedia.org/wiki/Content_addressed_storage">Content-Addressed Storage</a> design to store the MIME objects, similar to <a target="_blank" href="http://git-scm.com/">Git</a>. In a CAS database the keys are checksums of content, which provides many intrensic benefets, such as automatic de-duplication, global namespaces and elimination of caching issues.</p>

<p>Individual MIME "Parts" are stored according to their SHA1 checksum. Multipart MIME objects contain referecnes to the SHA1s of their subparts, rather than the actual content. This creates a tree structure much like the structure of Git commits and tree (directory) objects.</p>

<p>If you are not familiar Git's wonderful design and Content-Addressed Storage concepts, I suggest you read my Linux Jounral Article on the topic: <a target="_blank" href="http://www.linuxjournal.com/content/git-revision-control-perfected">Git - Revision Control Perfected</a> (2011)</p>

<p>In addition to the core MIME storage model, there is also a Mailbox/Folder/Message structure that provides a context for the objects. </p>

<p>This schema is just an example to showcase a DBIC schema that can be loaded with some nice test data (E-Mails). It has been loaded with "Mailboxes" referencing various mailing lists, with "Folders" representing Individual monthly Pipermail archive files containing "Messages"</p>


<br>

<h1>In Progress!</h1>

This document is just a starter and is by no means complete


<h1>Getting RapidApp</h1>

<p>RapidApp is still under development and there are many tasks and refactoring yet to be done. While it is fully functional today, and we have developed a number of very successful projects using it over the past several years, the API is not yet finalized and there are still some things in flux that has stopped us from officially releasing it to the world. However, I am happy to provide the code to anyone that is interested.</p>

<p>We started developing RapidApp for our own in-house use and are now actively working on making a public release to give back to the community. This is a lot of work! Besides the remaining coding tasks and finalization of the API, there is lots of documentation to write. If you are interested in getting involved or helping us finish the public release, contact me below!</p>


<h1>Author</h1>

Henry Van Styn <br>
<a href="mailto:vanstyn@cpan.org">vanstyn@cpan.org</a><br>
IntelliTree Solutions<br>
<a target="_blank" href="http://www.intellitree.com">www.intellitree.com</a>


</div>


</body>
</html>